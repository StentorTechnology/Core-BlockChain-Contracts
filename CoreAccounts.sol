pragma solidity ^0.4.13;
contract CoreAccounts{
    //use call to call other contracts and delegatecall to use the storage in this contract
    
    /*
    Stores the number of current accounts and points to the next avalible index
    for the allAccounts array
    */
    uint private accountCount = 0;
    
    /*
    --when extention is needed, extention should inharet so all calls can be forwarded to extention(maybe)--
    address private extention = <address of extention contract goes here>;
    to call extention functions by using delegatecall method : extention.delegatecall('function_name', param_list);
    */
    
    /*
    Contracts cannot be saved yet because currently solidity cannot convert
    an array in memory to an array in storage. All instances and functions
    refering to contracts are commented out until this functionality is 
    implemented in solidity. All instances for storing and getting contracts
    are commented along with "FOR CONTRACT STRUCT" so simply searching for this
    string will get any editor to the locations that need to be uncommented for
    this struct to work.
    
    Info needed to get an instance to a deployed contract that the user deployed
    struct Contract{
        address addr;
        string ABI;
    }*/
    
    //user's personal data
    struct User{
        string first;
        string last;
        uint birthdate;
        string email;
        string phone;
    }    
    
    //balance is already part of address variable in ethereum
    //outter struct to hold all account data
    struct Account{
        uint id;
        address account;
        address cluster;
        User user;
        string username;
        uint createdAt;
        string locale;
        //Contract[] contracts; FOR CONTRACT STRUCT
        uint contractCount;
    }
    
    
    
    //gives each account an id to quickly find it in the allAccounts array
    mapping(string => uint) Accounts;
    
    //array of all accounts, useful for searching to match specific fields for an account
    Account[] allAccounts;
    
    /*pushes an Account struct onto the array and increments the account
    currently not used
    function add(Account a) internal{
        allAccounts.push(a);
        accountCount++;
    }*/
    
    
    
    /*
      creates a new account and adds it to the end of the allAccounts array
      the commented out lines is to avoid error for stack being too deep
      (Note: make sure to set gas variable in eth.sendTransaction to 4700000
      when calling this function)
      params:
      account = account address on ethereum
      cluster = address of cluster account belongs to
      first = first name
      last = last name
      birthdate = date of birth using unix time
      email = provided email
      phone = phone number
      username = sbb account username
      locale = location of user
    */
    function createAccount(address _account, address _cluster, string _first,
                            string _last, uint _birthdate, string _email,
                            string _phone, string _username, string _locale){
        Accounts[_username] = accountCount;
        //Contract[] memory _contracts; FOR CONTRACT STRUCT
        Account memory a = Account(accountCount, _account, _cluster,
                                User(_first, _last, _birthdate, _email, _phone),
                                _username, now, _locale, /*_contracts, FOR CONTRACT STRUCT*/ 0);
        allAccounts.push(a);
        accountCount++;
    }
    
    /*function setAddresses(string _username, address _account, address _cluster){
        Accounts[_username].account = _account;
        Accounts[_username].cluster = _cluster;
    }*/
    
    /*
        --Start Of Get Functions--
    */
    
    function count() constant returns(uint){
        return accountCount;
    }
    
    //gets the id or the index of an account by the username
    function getId(string _username) constant returns(uint){
        return Accounts[_username];
    }
    
    function getAccount(uint _id) constant returns(address){
        return allAccounts[_id].account;
    }
    
    function getCluster(/*string _username*/uint _id) constant returns(address){
        return allAccounts[_id].cluster;
    }
    
    function getFirstname(uint id) constant returns(string){
        return allAccounts[id].user.first;
    }
    
    function getLastname(uint id) constant returns(string){
        return allAccounts[id].user.last;
    }
    
    function getEmail(uint id) constant returns(string){
        return allAccounts[id].user.email;
    }
    
    function getPhoneNumber(uint id) constant returns(string){
        return allAccounts[id].user.phone;
    }

    function getBirthdate(uint id) constant returns(uint){
        return allAccounts[id].user.birthdate;
    }
    
    function getUsername(/*string _username*/uint _id) constant returns(string){
        return allAccounts[_id].username;
    }
    
    function getLocale(uint id) constant returns(string){
        return allAccounts[id].locale;
    }
    
    function getSignUpDate(uint id) constant returns(uint){
        return allAccounts[id].createdAt;
    }
    
    function getContractCount(uint id) constant returns(uint){
        return allAccounts[id].contractCount;
    }
    
    function getBalance(uint id) constant returns(uint){
        return allAccounts[id].account.balance;
    }
    
    /*
    FOR CONTRACT STRUCT
    function getContract(uint _id, uint _Cid) constant returns(address, string){
        return (allAccounts[_id].contracts[_Cid].addr, allAccounts[_id].contracts[_Cid].ABI);
    }*/
    /*
        --End Of Get Functions--
        --Start Of Set Functions--
    */
    
    function updateLocale(uint id, string _locale){
        allAccounts[id].locale = _locale;
    }
    
    function updateFirstName(uint id, string _first){
        allAccounts[id].user.first = _first;
    }
    
    function updateLastName(uint id, string _last){
        allAccounts[id].user.last = _last;
    }
    
    function updateEmail(uint id, string _email){
        allAccounts[id].user.email = _email;
    }
    
    function updatePhoneNumber(uint id, string number){
        allAccounts[id].user.phone = number;
    }
    
    /*
    FOR CONTRACT STRUCT
    function addContract(uint id, string abi, address addr){
        allAccounts[id].contractCount++;
        allAccounts[id].contracts.push(Contract(addr, abi));
    }

    /*
        --End Of Set Functions--
        --Start Of Search Functions--
    */

    /*
        function to check if 2 strings are the same
    */
    function stringsEqual(string storage _a, string memory _b) internal returns (bool) {
		//converts _a and _b to their byte versions
		bytes storage a = bytes(_a);
		bytes memory b = bytes(_b);
		//checks if their lengths are the same
		if (a.length != b.length)
			return false;
		// checks if all bytes are the same
		for (uint i = 0; i < a.length; i ++)
			if (a[i] != b[i])
				return false;
		return true;
	}

    /*
    --search functions--
    */
    
    /*
    Searches the accounts by first name and returns 0x0 if name is not found
    */
    function searchByFirstName(string _first) returns(address){
        for(uint i = 0; i < accountCount; i++){
            if(stringsEqual(allAccounts[i].user.first, _first)){
                return allAccounts[i].account;
            }
        }
        return 0x0;
    }
    
    /*
    Searches the accounts by last name and returns 0x0 if name is not found
    */
    function searchByLastName(string _last) returns(address){
        for(uint i = 0; i < accountCount; i++){
            if(stringsEqual(allAccounts[i].user.last, _last)){
                return allAccounts[i].account;
            }
        }
        return 0x0;
    }
}

/*
var browser_coreaccounts_sol_coreaccountsContract = web3.eth.contract([{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getCluster","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"count","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getContractCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getFirstname","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"number","type":"string"}],"name":"updatePhoneNumber","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getLastname","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_last","type":"string"}],"name":"searchByLastName","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"_last","type":"string"}],"name":"updateLastName","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"_first","type":"string"}],"name":"updateFirstName","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getLocale","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getSignUpDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getEmail","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"_email","type":"string"}],"name":"updateEmail","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_first","type":"string"}],"name":"searchByFirstName","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getPhoneNumber","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getBirthdate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_username","type":"string"}],"name":"getId","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getAccount","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"_locale","type":"string"}],"name":"updateLocale","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_account","type":"address"},{"name":"_cluster","type":"address"},{"name":"_first","type":"string"},{"name":"_last","type":"string"},{"name":"_birthdate","type":"uint256"},{"name":"_email","type":"string"},{"name":"_phone","type":"string"},{"name":"_username","type":"string"},{"name":"_locale","type":"string"}],"name":"createAccount","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getUsername","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"}]);
var b = browser_coreaccounts_sol_coreaccountsContract.new(
   {
     from: web3.eth.accounts[3], 
     data: '0x606060405260008055341561001357600080fd5b5b611de3806100236000396000f30060606040523615610126576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630179240c1461012b57806306661abd1461018e5780631dc8af0a146101b75780631e010439146101ee57806320773c97146102255780633d30eafb146102c2578063457948f91461032857806358dbc48b146103c557806363a0a8b9146104625780636f74e66b146104c857806389ac30841461052e5780638f1ed082146105cb578063972fe8bc14610602578063a27534641461069f578063a635bb2d14610705578063b1b5c730146107a2578063b6d225511461083f578063bee51f3b14610876578063ce88b145146108e7578063d66e3ec71461094a578063efe44413146109b0578063f18d18cc14610ba3575b600080fd5b341561013657600080fd5b61014c6004808035906020019091905050610c40565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561019957600080fd5b6101a1610c8f565b6040518082815260200191505060405180910390f35b34156101c257600080fd5b6101d86004808035906020019091905050610c99565b6040518082815260200191505060405180910390f35b34156101f957600080fd5b61020f6004808035906020019091905050610cc8565b6040518082815260200191505060405180910390f35b341561023057600080fd5b6102466004808035906020019091905050610d2e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102875780820151818401525b60208101905061026b565b50505050905090810190601f1680156102b45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102cd57600080fd5b610326600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610dfe565b005b341561033357600080fd5b6103496004808035906020019091905050610e3f565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561038a5780820151818401525b60208101905061036e565b50505050905090810190601f1680156103b75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103d057600080fd5b610420600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610f0f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561046d57600080fd5b6104c6600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610fbb565b005b34156104d357600080fd5b61052c600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610ffc565b005b341561053957600080fd5b61054f600480803590602001909190505061103d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105905780820151818401525b602081019050610574565b50505050905090810190601f1680156105bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105d657600080fd5b6105ec600480803590602001909190505061110a565b6040518082815260200191505060405180910390f35b341561060d57600080fd5b6106236004808035906020019091905050611139565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106645780820151818401525b602081019050610648565b50505050905090810190601f1680156106915780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156106aa57600080fd5b610703600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611209565b005b341561071057600080fd5b610760600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061124a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107ad57600080fd5b6107c360048080359060200190919050506112f6565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108045780820151818401525b6020810190506107e8565b50505050905090810190601f1680156108315780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561084a57600080fd5b61086060048080359060200190919050506113c6565b6040518082815260200191505060405180910390f35b341561088157600080fd5b6108d1600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506113f8565b6040518082815260200191505060405180910390f35b34156108f257600080fd5b610908600480803590602001909190505061146f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561095557600080fd5b6109ae600480803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506114be565b005b34156109bb57600080fd5b610ba1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506114fc565b005b3415610bae57600080fd5b610bc460048080359060200190919050506117c5565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610c055780820151818401525b602081019050610be9565b50505050905090810190601f168015610c325780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000600282815481101515610c5157fe5b90600052602060002090600c020160005b5060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b6000805490505b90565b6000600282815481101515610caa57fe5b90600052602060002090600c020160005b50600b015490505b919050565b6000600282815481101515610cd957fe5b90600052602060002090600c020160005b5060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163190505b919050565b610d36611a1c565b600282815481101515610d4557fe5b90600052602060002090600c020160005b506003016000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610df15780601f10610dc657610100808354040283529160200191610df1565b820191906000526020600020905b815481529060010190602001808311610dd457829003601f168201915b505050505090505b919050565b80600283815481101515610e0e57fe5b90600052602060002090600c020160005b506003016004019080519060200190610e39929190611a30565b505b5050565b610e47611a1c565b600282815481101515610e5657fe5b90600052602060002090600c020160005b506003016001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f025780601f10610ed757610100808354040283529160200191610f02565b820191906000526020600020905b815481529060010190602001808311610ee557829003601f168201915b505050505090505b919050565b600080600090505b600054811015610fb057610f51600282815481101515610f3357fe5b90600052602060002090600c020160005b5060030160010184611892565b15610fa257600281815481101515610f6557fe5b90600052602060002090600c020160005b5060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150610fb5565b5b8080600101915050610f17565b600091505b50919050565b80600283815481101515610fcb57fe5b90600052602060002090600c020160005b506003016001019080519060200190610ff6929190611a30565b505b5050565b8060028381548110151561100c57fe5b90600052602060002090600c020160005b506003016000019080519060200190611037929190611a30565b505b5050565b611045611a1c565b60028281548110151561105457fe5b90600052602060002090600c020160005b50600a018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110fd5780601f106110d2576101008083540402835291602001916110fd565b820191906000526020600020905b8154815290600101906020018083116110e057829003601f168201915b505050505090505b919050565b600060028281548110151561111b57fe5b90600052602060002090600c020160005b506009015490505b919050565b611141611a1c565b60028281548110151561115057fe5b90600052602060002090600c020160005b506003016003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111fc5780601f106111d1576101008083540402835291602001916111fc565b820191906000526020600020905b8154815290600101906020018083116111df57829003601f168201915b505050505090505b919050565b8060028381548110151561121957fe5b90600052602060002090600c020160005b506003016003019080519060200190611244929190611a30565b505b5050565b600080600090505b6000548110156112eb5761128c60028281548110151561126e57fe5b90600052602060002090600c020160005b5060030160000184611892565b156112dd576002818154811015156112a057fe5b90600052602060002090600c020160005b5060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506112f0565b5b8080600101915050611252565b600091505b50919050565b6112fe611a1c565b60028281548110151561130d57fe5b90600052602060002090600c020160005b506003016004018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113b95780601f1061138e576101008083540402835291602001916113b9565b820191906000526020600020905b81548152906001019060200180831161139c57829003601f168201915b505050505090505b919050565b60006002828154811015156113d757fe5b90600052602060002090600c020160005b506003016002015490505b919050565b60006001826040518082805190602001908083835b60208310151561143357805182525b60208201915060208101905060208303925061140d565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390205490505b919050565b600060028281548110151561148057fe5b90600052602060002090600c020160005b5060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b806002838154811015156114ce57fe5b90600052602060002090600c020160005b50600a0190805190602001906114f6929190611a30565b505b5050565b611504611ab0565b6000546001846040518082805190602001908083835b60208310151561154057805182525b60208201915060208101905060208303925061151a565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055506101006040519081016040528060005481526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018a73ffffffffffffffffffffffffffffffffffffffff16815260200160a0604051908101604052808b81526020018a8152602001898152602001888152602001878152508152602001848152602001428152602001838152602001600081525090506002805480600101828161161e9190611b34565b91600052602060002090600c020160005b8390919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160008201518160000190805190602001906116f2929190611b66565b50602082015181600101908051906020019061170f929190611b66565b50604082015181600201556060820151816003019080519060200190611736929190611b66565b506080820151816004019080519060200190611753929190611b66565b5050506080820151816008019080519060200190611772929190611b66565b5060a0820151816009015560c082015181600a019080519060200190611799929190611b66565b5060e082015181600b015550505060008081548092919060010191905055505b50505050505050505050565b6117cd611a1c565b6002828154811015156117dc57fe5b90600052602060002090600c020160005b506008018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118855780601f1061185a57610100808354040283529160200191611885565b820191906000526020600020905b81548152906001019060200180831161186857829003601f168201915b505050505090505b919050565b60008061189d611be6565b60008592508491508151838054600181600116156101000203166002900490501415156118cd5760009350611a13565b600090505b82805460018160011615610100020316600290049050811015611a0e5781818151811015156118fd57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168382815460018160011615610100020316600290048110151561198957fe5b8154600116156119a85790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515611a005760009350611a13565b5b80806001019150506118d2565b600193505b50505092915050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a7157805160ff1916838001178555611a9f565b82800160010185558215611a9f579182015b82811115611a9e578251825591602001919060010190611a83565b5b509050611aac9190611bfa565b5090565b6101806040519081016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001611b06611c1f565b8152602001611b13611c67565b815260200160008152602001611b27611c67565b8152602001600081525090565b815481835581811511611b6157600c0281600c028360005260206000209182019101611b609190611c7b565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ba757805160ff1916838001178555611bd5565b82800160010185558215611bd5579182015b82811115611bd4578251825591602001919060010190611bb9565b5b509050611be29190611bfa565b5090565b602060405190810160405280600081525090565b611c1c91905b80821115611c18576000816000905550600101611c00565b5090565b90565b60a060405190810160405280611c33611c67565b8152602001611c40611c67565b815260200160008152602001611c54611c67565b8152602001611c61611c67565b81525090565b602060405190810160405280600081525090565b611d6c91905b80821115611d68576000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160008082016000611cf59190611d6f565b600182016000611d059190611d6f565b6002820160009055600382016000611d1d9190611d6f565b600482016000611d2d9190611d6f565b5050600882016000611d3f9190611d6f565b6009820160009055600a82016000611d579190611d6f565b600b82016000905550600c01611c81565b5090565b90565b50805460018160011615610100020316600290046000825580601f10611d955750611db4565b601f016020900490600052602060002090810190611db39190611bfa565b5b505600a165627a7a72305820caf91e27019c44c1cdcf0e06d13baf6008ba518793653dabbbc179646b02dee20029', 
     gas: '4700000'
   }, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })
 
 b.createAccount.sendTransaction(eth.accounts[0], eth.accounts[1], 'kyne', 'liu', 5, 'email', 'phone', 'zaneth', 'ca', {from: eth.accounts[3], gas: 4700000})
 
 0x796e25b8f8c646b7179824c914773c15cdfac83e
 
*/
