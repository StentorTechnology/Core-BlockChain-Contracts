pragma solidity ^0.4.13;
contract CoreAccounts{
    //use call to call other contracts and delegatecall to use the storage in this contract
    uint private accountCount = 0;
    
    /*
    --when extention is needed, extention should inharet so all calls can be forwarded to extention(maybe)--
    address private extention = <address of extention contract goes here>;
    to call extention functions by using delegatecall method : extention.delegatecall('function_name', param_list);
    */
    
    /*struct Contract{
        address addr;
        string ABI;
    }*/
    
    //user's personal data
    struct User{
        string first;
        string last;
        uint birthdate;
        string email;
        string phone;
    }    
    
    //balance is already part of address variable in ethereum
    //outter struct to hold all account data
    struct Account{
        uint id;
        address cluster;
        address account;
        User user;
        string username;
        uint createdAt;
        string locale;
        //Contract[] contracts;
        uint contractCount;
    }
    
    
    
    //gives each account an id to quickly find it in the allAccounts array
    mapping(string => uint) mapAccounts;
    
    //array of all accounts, useful for searching to match specific fields for an account
    Account[] allAccounts;
    
    function add(Account a) private{
        allAccounts.push(a);
    }
    
    
    
    /*
      creates a new account and adds it to the end of the allAccounts array
      the commented out lines is to avoid error for stack being too deep
      params:
      account = account address on ethereum
      cluster = address of cluster account belongs to
      first = first name
      last = last name
      birthdate = date of birth using unix time
      email = provided email
      phone = phone number
      username = sbb account username
      locale = location of user
    */
    function createAccount(address account, address cluster, string first,
            string last, uint birthdate, string email, string phone,
            string username, string locale){
        accountCount++;
        mapAccounts[username] = accountCount;
        //Contract[] storage cont;
        allAccounts.push(Account(accountCount, account, cluster, User(first,
            last, birthdate, email, phone), username, now, locale, 0));
    }
    
    /*
        --Start Of Get Functions--
    */
    
    function getAccount(uint id) constant returns(address){
        return allAccounts[id].account;
    }
    
    function getCluster(uint id) constant returns(address){
        return allAccounts[id].cluster;
    }
    
    function getFirstname(uint id) constant returns(string){
        return allAccounts[id].user.first;
    }
    
    function getLastname(uint id) constant returns(string){
        return allAccounts[id].user.last;
    }
    
    function getEmail(uint id) constant returns(string){
        return allAccounts[id].user.email;
    }
    
    function getPhoneNumber(uint id) constant returns(string){
        return allAccounts[id].user.phone;
    }

    function getBirthdate(uint id) constant returns(uint){
        return allAccounts[id].user.birthdate;
    }
    
    function getUsername(uint id) constant returns(string){
        return allAccounts[id].username;
    }
    
    function getLocale(uint id) constant returns(string){
        return allAccounts[id].locale;
    }
    
    function getSignUpDate(uint id) constant returns(uint){
        return allAccounts[id].createdAt;
    }
    
    /*function getContractCount(uint id) constant returns(uint){
        return allAccounts[id].contractCount;
    }*/
    
    function getBalance(uint id) constant returns(uint){
        return allAccounts[id].account.balance;
    }
    
    /*
        --End Of Get Functions--
        --Start Of Set Functions--
    */
    
    function updateLocale(uint id, string _locale){
        allAccounts[id].locale = _locale;
    }
    
    function updateFirstName(uint id, string _first){
        allAccounts[id].user.first = _first;
    }
    
    function updateLastName(uint id, string _last){
        allAccounts[id].user.last = _last;
    }
    
    function updateEmail(uint id, string _email){
        allAccounts[id].user.email = _email;
    }
    
    function updatePhoneNumber(uint id, string number){
        allAccounts[id].user.phone = number;
    }
    
    /*function addContract(uint id, string abi, address addr){
        allAccounts[id].contractCount++;
        allAccounts[id].contracts.push(Contract(addr, abi));
    }*/

    /*
        --End Of Set Functions--
        --Start Of Search Functions--
    */

    /*
        function to check if 2 strings are the same
    */
    function stringsEqual(string storage _a, string memory _b) internal returns (bool) {
		//converts _a and _b to their byte versions
		bytes storage a = bytes(_a);
		bytes memory b = bytes(_b);
		//checks if their lengths are the same
		if (a.length != b.length)
			return false;
		// checks if all bytes are the same
		for (uint i = 0; i < a.length; i ++)
			if (a[i] != b[i])
				return false;
		return true;
	}

    function searchByName(string _first, string _last) returns(address[]){
        address[] storage results;
        for(uint i = 0; i < accountCount; i++){
            if(stringsEqual(allAccounts[i].user.first, _first) && stringsEqual(allAccounts[i].user.last, _last)){
                results.push(allAccounts[i].account);
            }
        }
        return results;
    }
    
    function searchLocale(string _locale) returns(address[]){
        address[] storage results;
        for(uint i = 0; i < accountCount; i++){
            if(stringsEqual(allAccounts[i].locale, _locale) && stringsEqual(allAccounts[i].locale, _locale)){
                results.push(allAccounts[i].account);
            }
        }
        return results;
    }
}

/*
var browser_coreaccounts_sol_coreaccountsContract = web3.eth.contract([{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getCluster","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getFirstname","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"number","type":"string"}],"name":"updatePhoneNumber","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getLastname","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"_last","type":"string"}],"name":"updateLastName","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"_first","type":"string"}],"name":"updateFirstName","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getLocale","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getSignUpDate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_locale","type":"string"}],"name":"searchLocale","outputs":[{"name":"","type":"address[]"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getEmail","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"_email","type":"string"}],"name":"updateEmail","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getPhoneNumber","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getBirthdate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_first","type":"string"},{"name":"_last","type":"string"}],"name":"searchByName","outputs":[{"name":"","type":"address[]"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getAccount","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"_locale","type":"string"}],"name":"updateLocale","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"account","type":"address"},{"name":"cluster","type":"address"},{"name":"first","type":"string"},{"name":"last","type":"string"},{"name":"birthdate","type":"uint256"},{"name":"email","type":"string"},{"name":"phone","type":"string"},{"name":"username","type":"string"},{"name":"locale","type":"string"}],"name":"createAccount","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"id","type":"uint256"}],"name":"getUsername","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"}]);
var coreaccounts = browser_coreaccounts_sol_coreaccountsContract.new(
   {
     from: web3.eth.accounts[3], 
     data: '0x606060405260008055341561001357600080fd5b5b611e41806100236000396000f30060606040523615610105576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630179240c1461010a5780631e0104391461016d57806320773c97146101a45780633d30eafb14610241578063457948f9146102a757806363a0a8b9146103445780636f74e66b146103aa57806389ac3084146104105780638f1ed082146104ad57806391c5002c146104e4578063972fe8bc14610597578063a275346414610634578063b1b5c7301461069a578063b6d2255114610737578063bcf930601461076e578063ce88b14514610864578063d66e3ec7146108c7578063efe444131461092d578063f18d18cc14610b20575b600080fd5b341561011557600080fd5b61012b6004808035906020019091905050610bbd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561017857600080fd5b61018e6004808035906020019091905050610c0c565b6040518082815260200191505060405180910390f35b34156101af57600080fd5b6101c56004808035906020019091905050610c72565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102065780820151818401525b6020810190506101ea565b50505050905090810190601f1680156102335780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561024c57600080fd5b6102a5600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610d42565b005b34156102b257600080fd5b6102c86004808035906020019091905050610d83565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103095780820151818401525b6020810190506102ed565b50505050905090810190601f1680156103365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561034f57600080fd5b6103a8600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610e53565b005b34156103b557600080fd5b61040e600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610e94565b005b341561041b57600080fd5b6104316004808035906020019091905050610ed5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104725780820151818401525b602081019050610456565b50505050905090810190601f16801561049f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104b857600080fd5b6104ce6004808035906020019091905050610fa2565b6040518082815260200191505060405180910390f35b34156104ef57600080fd5b61053f600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610fd1565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156105835780820151818401525b602081019050610567565b505050509050019250505060405180910390f35b34156105a257600080fd5b6105b86004808035906020019091905050611198565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105f95780820151818401525b6020810190506105dd565b50505050905090810190601f1680156106265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561063f57600080fd5b610698600480803590602001909190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611268565b005b34156106a557600080fd5b6106bb60048080359060200190919050506112a9565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156106fc5780820151818401525b6020810190506106e0565b50505050905090810190601f1680156107295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561074257600080fd5b6107586004808035906020019091905050611379565b6040518082815260200191505060405180910390f35b341561077957600080fd5b61080c600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506113ab565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108505780820151818401525b602081019050610834565b505050509050019250505060405180910390f35b341561086f57600080fd5b6108856004808035906020019091905050611579565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156108d257600080fd5b61092b600480803590602001909190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919050506115c8565b005b341561093857600080fd5b610b1e600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611606565b005b3415610b2b57600080fd5b610b4160048080359060200190919050506118c3565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b825780820151818401525b602081019050610b66565b50505050905090810190601f168015610baf5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000600282815481101515610bce57fe5b90600052602060002090600c020160005b5060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b6000600282815481101515610c1d57fe5b90600052602060002090600c020160005b5060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163190505b919050565b610c7a611b1a565b600282815481101515610c8957fe5b90600052602060002090600c020160005b506003016000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d355780601f10610d0a57610100808354040283529160200191610d35565b820191906000526020600020905b815481529060010190602001808311610d1857829003601f168201915b505050505090505b919050565b80600283815481101515610d5257fe5b90600052602060002090600c020160005b506003016004019080519060200190610d7d929190611b2e565b505b5050565b610d8b611b1a565b600282815481101515610d9a57fe5b90600052602060002090600c020160005b506003016001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e465780601f10610e1b57610100808354040283529160200191610e46565b820191906000526020600020905b815481529060010190602001808311610e2957829003601f168201915b505050505090505b919050565b80600283815481101515610e6357fe5b90600052602060002090600c020160005b506003016001019080519060200190610e8e929190611b2e565b505b5050565b80600283815481101515610ea457fe5b90600052602060002090600c020160005b506003016000019080519060200190610ecf929190611b2e565b505b5050565b610edd611b1a565b600282815481101515610eec57fe5b90600052602060002090600c020160005b50600a018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f955780601f10610f6a57610100808354040283529160200191610f95565b820191906000526020600020905b815481529060010190602001808311610f7857829003601f168201915b505050505090505b919050565b6000600282815481101515610fb357fe5b90600052602060002090600c020160005b506009015490505b919050565b610fd9611bae565b600080600090505b60005481101561110857611018600282815481101515610ffd57fe5b90600052602060002090600c020160005b50600a0185611990565b801561104d575061104c60028281548110151561103157fe5b90600052602060002090600c020160005b50600a0185611990565b5b156110fa578180548060010182816110659190611bc2565b916000526020600020900160005b60028481548110151561108257fe5b90600052602060002090600c020160005b5060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b5b8080600101915050610fe1565b8180548060200260200160405190810160405280929190818152602001828054801561118957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161113f575b505050505092505b5050919050565b6111a0611b1a565b6002828154811015156111af57fe5b90600052602060002090600c020160005b506003016003018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561125b5780601f106112305761010080835404028352916020019161125b565b820191906000526020600020905b81548152906001019060200180831161123e57829003601f168201915b505050505090505b919050565b8060028381548110151561127857fe5b90600052602060002090600c020160005b5060030160030190805190602001906112a3929190611b2e565b505b5050565b6112b1611b1a565b6002828154811015156112c057fe5b90600052602060002090600c020160005b506003016004018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561136c5780601f106113415761010080835404028352916020019161136c565b820191906000526020600020905b81548152906001019060200180831161134f57829003601f168201915b505050505090505b919050565b600060028281548110151561138a57fe5b90600052602060002090600c020160005b506003016002015490505b919050565b6113b3611bae565b600080600090505b6000548110156114e8576113f56002828154811015156113d757fe5b90600052602060002090600c020160005b5060030160000186611990565b801561142d575061142c60028281548110151561140e57fe5b90600052602060002090600c020160005b5060030160010185611990565b5b156114da578180548060010182816114459190611bc2565b916000526020600020900160005b60028481548110151561146257fe5b90600052602060002090600c020160005b5060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b5b80806001019150506113bb565b8180548060200260200160405190810160405280929190818152602001828054801561156957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161151f575b505050505092505b505092915050565b600060028281548110151561158a57fe5b90600052602060002090600c020160005b5060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b919050565b806002838154811015156115d857fe5b90600052602060002090600c020160005b50600a019080519060200190611600929190611b2e565b505b5050565b60008081548092919060010191905055506000546001836040518082805190602001908083835b60208310151561165357805182525b60208201915060208101905060208303925061162d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020819055506002805480600101828161169e9190611bee565b91600052602060002090600c020160005b6101006040519081016040528060005481526020018d73ffffffffffffffffffffffffffffffffffffffff1681526020018c73ffffffffffffffffffffffffffffffffffffffff16815260200160a0604051908101604052808d81526020018c81526020018b81526020018a8152602001898152508152602001868152602001428152602001858152602001600081525090919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003016000820151816000019080519060200190611802929190611c20565b50602082015181600101908051906020019061181f929190611c20565b50604082015181600201556060820151816003019080519060200190611846929190611c20565b506080820151816004019080519060200190611863929190611c20565b5050506080820151816008019080519060200190611882929190611c20565b5060a0820151816009015560c082015181600a0190805190602001906118a9929190611c20565b5060e082015181600b01555050505b505050505050505050565b6118cb611b1a565b6002828154811015156118da57fe5b90600052602060002090600c020160005b506008018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119835780601f1061195857610100808354040283529160200191611983565b820191906000526020600020905b81548152906001019060200180831161196657829003601f168201915b505050505090505b919050565b60008061199b611ca0565b60008592508491508151838054600181600116156101000203166002900490501415156119cb5760009350611b11565b600090505b82805460018160011615610100020316600290049050811015611b0c5781818151811015156119fb57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191683828154600181600116156101000203166002900481101515611a8757fe5b815460011615611aa65790600052602060002090602091828204019190065b9054901a7f0100000000000000000000000000000000000000000000000000000000000000027effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515611afe5760009350611b11565b5b80806001019150506119d0565b600193505b50505092915050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b6f57805160ff1916838001178555611b9d565b82800160010185558215611b9d579182015b82811115611b9c578251825591602001919060010190611b81565b5b509050611baa9190611cb4565b5090565b602060405190810160405280600081525090565b815481835581811511611be957818360005260206000209182019101611be89190611cb4565b5b505050565b815481835581811511611c1b57600c0281600c028360005260206000209182019101611c1a9190611cd9565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c6157805160ff1916838001178555611c8f565b82800160010185558215611c8f579182015b82811115611c8e578251825591602001919060010190611c73565b5b509050611c9c9190611cb4565b5090565b602060405190810160405280600081525090565b611cd691905b80821115611cd2576000816000905550600101611cba565b5090565b90565b611dca91905b80821115611dc6576000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160008082016000611d539190611dcd565b600182016000611d639190611dcd565b6002820160009055600382016000611d7b9190611dcd565b600482016000611d8b9190611dcd565b5050600882016000611d9d9190611dcd565b6009820160009055600a82016000611db59190611dcd565b600b82016000905550600c01611cdf565b5090565b90565b50805460018160011615610100020316600290046000825580601f10611df35750611e12565b601f016020900490600052602060002090810190611e119190611cb4565b5b505600a165627a7a72305820642032a1adc9942ad9e9eee6cfdf31c23656ed10e513a8e8e12ca9af72007eb70029', 
     gas: '4700000'
   }, function (e, contract){
    console.log(e, contract);
    if (typeof contract.address !== 'undefined') {
         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
    }
 })
 
 0x15cd0a12bfd69bd986158ac19f30b2f1ac7519ca
*/

